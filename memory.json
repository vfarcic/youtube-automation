{"type":"entity","name":"YouTube Automation Tool","entityType":"Project","observations":["A Go-based command-line tool for automating YouTube video publishing workflow","Features include: YouTube video uploads with metadata, Hugo blog integration, Bluesky social media posting","Configuration via settings.yaml file and environment variables","Key files: main.go, cli.go, youtube.go, email.go, hugo.go, bluesky.go"]}
{"type":"entity","name":"Project Config","entityType":"Configuration","observations":["Uses settings.yaml with sections for email, AI, YouTube, Hugo, and Bluesky","Sensitive data can use environment variables: EMAIL_PASSWORD, AI_KEY, YOUTUBE_API_KEY, BLUESKY_PASSWORD","Required flags include email settings, AI settings (Azure OpenAI), YouTube API key, and Hugo path","Optional flags for Bluesky integration"]}
{"type":"entity","name":"Project Requirements","entityType":"Dependencies","observations":["Go 1.x","YouTube API credentials (client_secret.json)","Azure OpenAI API key","Email account for notifications","Optional: Hugo site repository","Optional: Bluesky account"]}
{"type":"entity","name":"Git Workflow Rule","entityType":"Process","observations":["When pushing changes to Git, add a list of completed Taskmaster tasks to the PR description","Mark tasks as 'done' in the PR description that have been completed in the current work","Always include task IDs and titles for clear tracking of completed work","This provides better visibility into what each PR accomplishes"]}
{"type":"entity","name":"Charmbracelet Libraries","entityType":"UI Framework","observations":["The YouTube Automation project uses Charmbracelet libraries for its terminal UI components","Uses 'huh' library for interactive forms and confirmation dialogs","Uses 'lipgloss' for terminal styling and text formatting","Part of the confirmation utility implementation in pkg/utils/confirmation.go","Provides a consistent and user-friendly terminal UI experience"]}
{"type":"entity","entityType":"TestingGuideline","name":"MockingStrategy","observations":["Avoid doing mock except when working with external APIs.","Focus on integration tests with temporary files and actual file system operations where possible for non-external API interactions."]}
{"type":"entity","observations":["The project is written in Go.","The project is hosted on GitHub.","The `gh` CLI can be used for GitHub command-line operations.","The `github` MCP toolset can be used for interacting with the GitHub API."],"name":"youtube-automation","entityType":"Project"}
{"type":"entity","observations":["The `tasks/` directory and its contents are listed in `.gitignore`.","When removing task files as part of a workflow (like PR finalization):","1. Remove ALL files from the `tasks/` directory using `rm -rf tasks/*` or `rm -f tasks/*` (if you want to be prompted for directories). Be cautious with `rm -rf`.","2. This is a local filesystem change, not a staged `git rm` action, due to `.gitignore`."],"name":"TasksDirectoryHandling","entityType":"ProjectConfiguration"}
{"type":"entity","name":"Test-Driven Development","observations":["ACTION REQUIRED: YOU MUST APPLY Test-Driven Development (TDD) for all code changes in this project.","FIRST STEP: Before proposing *any* code modification (e.g., via `edit_file`) or writing implementation code, ALWAYS write the necessary test(s) first.","TDD CYCLE: Follow the Red-Green-Refactor cycle (Write failing test -> Write code to pass -> Refactor).","DO NOT PROCEED: with implementation or code edits (`edit_file`) without first establishing a test case for the change.","TDD is a software development approach where tests are written before the code implementation.","Benefits include better design, higher code quality, built-in regression testing, and clear specification of requirements.","**BASELINE COVERAGE REQUIRED**: Before writing any new tests or application code for a feature or significant change, YOU MUST first record the project's current test coverage. Use: `go test ./... -cover > baseline-coverage.txt 2>&1` to save results to a file. This prevents losing baseline numbers in long sessions and enables accurate before/after comparison.","CRITICAL WORKFLOW STEP: Immediately after parsing a PRD and *before* identifying or starting the first task that involves writing tests or application code (as per TDD), ALWAYS run and save the baseline test coverage: `go test ./... -cover > baseline-coverage.txt 2>&1`. Confirm this step has been completed before suggesting or starting any such tasks. At the end, compare final coverage with saved baseline.","BASELINE FILE USAGE: The baseline-coverage.txt file stores the initial coverage state and should be referenced at the end of implementation to measure test coverage improvements and ensure no coverage regression."],"entityType":"Development Principle"}
{"type":"entity","name":"Get PRDs","entityType":"UserIntent","observations":["User wants to work with Taskmaster and GitHub issues labeled PRD."]}
{"type":"entity","observations":["A tool for managing software development projects.","CRITICAL: Subtask IDs use the format parentTaskId.subtaskId (e.g., 2.1, 2.2, 2.3) NOT just simple numbers","When using set_task_status or update_subtask commands, always use the full format like 2.1, not just 1","The subtasks array in get_tasks shows simple IDs (1, 2, 3) but the actual commands require the parent.child format","This is essential for proper task management and avoiding ID confusion","Successfully implemented string-based IDs for VideoListItem struct replacing numeric IDs","Path-based ID generation uses pattern: video.Category + '/' + video.Name","All API tests passing with new string ID system (75.4% coverage maintained)"],"name":"Taskmaster","entityType":"Tool"}
{"type":"entity","entityType":"DataSource","observations":["These issues are used as Product Requirement Documents."],"name":"GitHub Issues with PRD label"}
{"type":"entity","name":"youtube-automation Go project build process","entityType":"build_process","observations":["This Go project utilizes a `vendor` directory for its dependencies.","After modifying Go dependencies (e.g., with `go get` or `go mod tidy`), `go mod vendor` must be run to synchronize the `vendor` directory."]}
{"type":"entity","name":"youtube-web","entityType":"Repository","observations":["Frontend repository that consumes the YouTube Automation API","Should receive PRDs when the youtube-automation API changes","PRDs should contain all information needed for frontend implementation of API changes"]}
{"type":"entity","name":"Memory MCP Usage Restriction","entityType":"AgentBehaviorGuideline","observations":["The agent must only READ from memory MCP (search, open nodes, read graph) unless explicitly instructed by the user to add or update memory information","Do NOT create new entities, observations, or relations without explicit user request","Do NOT update existing memory entries unless specifically asked by the user","Memory modifications should only occur when the user explicitly says to memorize, remember, or update something in memory","This ensures memory remains under user control and prevents unwanted automatic memory updates"]}
{"type":"entity","name":"Testing Requirements","entityType":"Development Standard","observations":["Test-Driven Development (TDD) is mandatory - write tests before implementation code","Record baseline test coverage (go test ./... -cover) before making changes","All tests must pass before marking Taskmaster tasks as 'done'","Always run full test suite after code changes","Focus on integration tests over mocks except for external APIs","Verify code compiles successfully after changes"]}
{"type":"entity","name":"Git Workflow Standards","entityType":"Development Standard","observations":["vfarcic/youtube-automation requires PRs - no direct pushes to main branch","Default merge strategy: squash and merge","Before pushing to main: run 'go build -o youtube-release' and 'chmod +x youtube-release'","Always check git status for uncommitted changes before operations","Show files to be staged before running git add","Use GitHub MCP tools for remote operations, git CLI for local operations","After go mod changes: run 'go mod vendor' to sync vendor directory"]}
{"type":"entity","name":"PRD Management Workflow","entityType":"Development Standard","observations":["PRDs are GitHub Issues labeled 'PRD' - single source of truth","Use mcp_github_list_issues with 'PRD' label to fetch requirements","Must use Taskmaster to generate tasks from PRDs before implementation","Update GitHub Issue with work status when starting PRD","When PRD complete: close GitHub Issue and clean up local task files","Avoid duplicating PRD content in local files - work directly from GitHub Issues","LESSON LEARNED: PRD #210 was completed but GitHub Issue was left open - this caused confusion later","NEW RULE: Immediately after merging PRD implementation, ALWAYS close the GitHub PRD Issue with completion comment","AUTOMATION REMINDER: Use mcp_github_add_issue_comment + mcp_github_update_issue to close PRDs","FAILURE POINT: The gap between 'code merged' and 'PRD administratively closed' is where we lose track"]}
{"type":"entity","name":"Core Development Guidelines","entityType":"Development Standard","observations":["Always suggest commit messages rather than asking user to provide them","Present choices as numbered lists for easy user selection","Memory MCP: READ-ONLY unless explicitly asked to update by user","When in doubt about syntax/features: consult Context7 documentation","Validate Nushell scripts after modification using script --help","Add new unit tests for new features even if existing tests pass"]}
{"type":"entity","name":"PRD Workflow Best Practice","entityType":"workflow","observations":["PRDs should be GitHub Issues labeled 'PRD' as single source of truth","Local PRD markdown files (.taskmaster/docs/*.md) should be DELETED after creating GitHub Issue","This prevents confusion and ensures GitHub Issue is the authoritative version","Workflow: 1) Create PRD markdown file, 2) Create GitHub Issue with PRD content, 3) Delete local PRD file, 4) Use parse_prd with GitHub Issue content or recreate local file from issue","GitHub Issues provide better collaboration, comments, tracking, and version control"]}
{"type":"entity","name":"Complete Session Workflow","entityType":"Workflow","observations":["COMPLETE SESSION COMPLETION PROTOCOL: When user indicates session completion with phrases like:","- 'We're done', 'I'm done', 'That's it', 'Finished', 'Complete', 'All set'","- 'Ready to wrap up', 'Time to finish', 'Let's close this out'","- Or any phrase indicating work completion and session ending","Follow ALL these steps in order:","PHASE 1: CODE SUBMISSION (Steps 1-6)","1. Check git status for uncommitted changes","2. Create feature branch with descriptive name (feature/prd-XXX-description)","3. Stage all changes (git add .)","4. Commit with comprehensive message including feat/docs/fix prefix","5. Push branch to origin (git push -u origin branch-name)","6. Create PR with detailed description using GitHub MCP","PHASE 2: REVIEW & MERGE (Steps 7-12)","7. Check PR reviews using mcp_github_get_pull_request_reviews","8. If approved: merge PR using mcp_github_merge_pull_request with squash method","9. Switch to main branch (git checkout main) - MUST BE DONE BEFORE DELETING FEATURE BRANCH","10. Delete feature branch locally (git branch -d branch-name)","11. Delete remote feature branch (git push origin --delete branch-name)","12. Pull latest changes (git pull origin main)","PHASE 3: POST-MERGE CLEANUP (Steps 13-15)","13. Close GitHub PRD Issue with completion comment using mcp_github_add_issue_comment + mcp_github_update_issue","14. Clean up local task files (rm -f .taskmaster/tasks/*)","15. Delete local PRD file (rm -f .taskmaster/docs/prd_*.txt)","PHASE 4: API CHANGE HANDLING (Step 16)","16. If API endpoints were modified: create corresponding PRD in youtube-web repository","CRITICAL: All 16 steps must be completed - frequently steps 7-16 are forgotten!","WORKFLOW CLASSIFICATION: Use CODE CHANGES workflow (manual review) if ANY *.go files modified, regardless of docs/memory changes","STEP 7 CLARIFICATION: Check reviews using mcp_github_get_pull_request_reviews","- Analyze any review comments for critical issues vs enhancements","- Human approval NOT required for merge - owner can self-approve","- Bot reviews (like Copilot) provide suggestions but are not blocking","- Proceed to merge if no critical issues identified","REVIEW ANALYSIS CRITERIA: Critical = security, breaking changes, test failures; Enhancement = style, minor improvements","PHASE 2 STEP ORDER CORRECTION: Steps 9-12 reordered to prevent git branch deletion error:","- Step 9: Switch to main branch FIRST (cannot delete branch you're currently on)","- Step 10: Delete local feature branch (now safe to delete)","- Step 11: Delete remote feature branch","- Step 12: Pull latest changes"]}
{"type":"relation","from":"YouTube Automation Tool","to":"Project Config","relationType":"uses"}
{"type":"relation","from":"YouTube Automation Tool","to":"Project Requirements","relationType":"requires"}
{"type":"relation","from":"Project","to":"YouTube Automation Tool","relationType":"is"}
{"type":"relation","from":"YouTube Automation Tool","to":"Charmbracelet Libraries","relationType":"uses for UI"}
{"type":"relation","to":"Taskmaster","relationType":"means user wants to work with","from":"Get PRDs"}
{"type":"relation","from":"Get PRDs","relationType":"means user wants to work with","to":"GitHub Issues with PRD label"}
{"type":"relation","to":"Taskmaster","from":"GitHub Issues with PRD label","relationType":"are used as PRDs for"}
{"type":"relation","from":"YouTube Automation Tool","to":"youtube-web","relationType":"provides API for"}
{"type":"relation","from":"YouTube Automation Tool","to":"Testing Requirements","relationType":"follows"}
{"type":"relation","from":"YouTube Automation Tool","to":"Git Workflow Standards","relationType":"follows"}
{"type":"relation","from":"YouTube Automation Tool","to":"PRD Management Workflow","relationType":"follows"}