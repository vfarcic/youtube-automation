{"type":"entity","name":"YouTube Automation Tool","entityType":"Project","observations":["A Go-based command-line tool for automating YouTube video publishing workflow","Features include: YouTube video uploads with metadata, Hugo blog integration, Bluesky social media posting","Configuration via settings.yaml file and environment variables","Key files: main.go, cli.go, youtube.go, email.go, hugo.go, bluesky.go"]}
{"type":"entity","name":"Project Config","entityType":"Configuration","observations":["Uses settings.yaml with sections for email, AI, YouTube, Hugo, and Bluesky","Sensitive data can use environment variables: EMAIL_PASSWORD, AI_KEY, YOUTUBE_API_KEY, BLUESKY_PASSWORD","Required flags include email settings, AI settings (Azure OpenAI), YouTube API key, and Hugo path","Optional flags for Bluesky integration"]}
{"type":"entity","name":"Project Requirements","entityType":"Dependencies","observations":["Go 1.x","YouTube API credentials (client_secret.json)","Azure OpenAI API key","Email account for notifications","Optional: Hugo site repository","Optional: Bluesky account"]}
{"type":"entity","name":"Test-Driven Development","entityType":"Development Principle","observations":["Test-Driven Development (TDD) is a software development approach where tests are written before the code implementation.","TDD follows a red-green-refactor cycle: write a failing test, implement code to make it pass, then refactor while keeping tests passing.","Tests should be written for all new features and bug fixes before implementing the actual code.","The focus is on writing only the code necessary to pass the tests, avoiding over-engineering.","Benefits include better design, higher code quality, built-in regression testing, and clear specification of requirements.","When implementing new functionality for the YouTube Automation project, always start with writing tests first."]}
{"type":"entity","name":"Git Workflow Rule","entityType":"Process","observations":["When pushing changes to Git, add a list of completed Taskmaster tasks to the PR description","Mark tasks as 'done' in the PR description that have been completed in the current work","Always include task IDs and titles for clear tracking of completed work","This provides better visibility into what each PR accomplishes"]}
{"type":"entity","name":"Pre-Git Commit ANTHROPIC_API_KEY Check","entityType":"Development Process","observations":["Always check whether ANTHROPIC_API_KEY in .cursor/mcp.json is set before committing files to Git.","If the ANTHROPIC_API_KEY is found in .cursor/mcp.json, the Git commit process should be aborted."]}
{"type":"entity","name":"Charmbracelet Libraries","entityType":"UI Framework","observations":["The YouTube Automation project uses Charmbracelet libraries for its terminal UI components","Uses 'huh' library for interactive forms and confirmation dialogs","Uses 'lipgloss' for terminal styling and text formatting","Part of the confirmation utility implementation in pkg/utils/confirmation.go","Provides a consistent and user-friendly terminal UI experience"]}
{"type":"entity","entityType":"TestingGuideline","name":"MockingStrategy","observations":["Avoid doing mock except when working with external APIs.","Focus on integration tests with temporary files and actual file system operations where possible for non-external API interactions."]}
{"type":"entity","observations":["The project is written in Go.","The project is hosted on GitHub.","The `gh` CLI can be used for GitHub operations."],"name":"youtube-automation","entityType":"Project"}
{"type":"entity","observations":["`.cursor/mcp.json` IS version controlled.","Before committing and pushing changes that include `.cursor/mcp.json`:","1. Manually remove/redact any live API keys (like ANTHROPIC_API_KEY) from the local `.cursor/mcp.json` file.","2. Stage and commit the version of `.cursor/mcp.json` that has the keys removed/redacted.","3. Push these changes to the remote repository.","4. After the push is successful, manually revert the local `.cursor/mcp.json` file to re-insert the live API keys so the local MCP server continues to function correctly."],"entityType":"DevelopmentProcessGuideline","name":"MCPKeyHandlingForGitPush"}
{"type":"entity","entityType":"ProjectPreference","name":"DefaultPRBaseBranch","observations":["When creating pull requests for the `youtube-automation` project, the default base branch to merge into should be `main`."]}
{"type":"entity","name":"PullRequestWorkflow","observations":["When a pull request (PR) is created based on work stemming from1 a Product Requirements Document (PRD):","1. The PRD content and relevant information from1 it should be included in the description of the PR.","2. As part of the changes included IN THE PR ITSELF:","   a. The PRD file should be MOVED from1 its original location (e.g., `scripts/`) to the `docs/reference/` directory.","   b. The associated Taskmaster task files (i.e., `tasks/tasks.json` and all individual markdown files in the `tasks/` directory) should be REMOVED from1 the file system.","These file management actions (move and deletions) should be committed to the feature branch and be part of the PR's diff."],"entityType":"DevelopmentProcessGuideline"}
{"type":"entity","observations":["The `tasks/` directory and its contents are listed in `.gitignore`.","When removing task files as part of a workflow (like PR finalization):","1. Remove ALL files from the `tasks/` directory using `rm -rf tasks/*` or `rm -f tasks/*` (if you want to be prompted for directories). Be cautious with `rm -rf`.","2. This is a local filesystem change, not a staged `git rm` action, due to `.gitignore`."],"name":"TasksDirectoryHandling","entityType":"ProjectConfiguration"}
{"type":"entity","name":"DefaultPRMergeStrategy","observations":["When merging pull requests for the `youtube-automation` project, the default strategy should be to SQUASH and merge."],"entityType":"ProjectPreference"}
{"type":"entity","entityType":"DevelopmentProcessGuideline","name":"PrePRMergeChecklist","observations":["Before attempting to merge a pull request:","1. Always check for uncommitted local changes or modified tracked files using `git status`.","2. Ensure these are either committed, stashed, or intentionally excluded before proceeding with the merge operation."]}
{"type":"entity","name":"CommitMessageSuggestion","observations":["When new changes are staged for a commit, always suggest a commit message rather than asking the user to provide one. The suggestion should be based on the nature of the staged files and changes."],"entityType":"DevelopmentProcessGuideline"}
{"type":"entity","observations":["When presenting the user with choices or alternative actions, always format them as a numbered list to make it easier for the user to indicate their selection."],"name":"NumberedOptionsForChoices","entityType":"CommunicationStyleGuideline"}
{"type":"relation","from":"YouTube Automation Tool","to":"Project Config","relationType":"uses"}
{"type":"relation","from":"YouTube Automation Tool","to":"Project Requirements","relationType":"requires"}
{"type":"relation","from":"Project","to":"YouTube Automation Tool","relationType":"is"}
{"type":"relation","from":"YouTube Automation Tool","to":"Charmbracelet Libraries","relationType":"uses for UI"}