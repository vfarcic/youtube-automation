openapi: 3.1.0
info:
  title: YouTube Automation API
  description: |
    REST API for YouTube video automation system that manages video lifecycle from ideation to post-publication.
    
    This API provides comprehensive CRUD operations for video management across 8 distinct phases:
    - Phase 0: Published
    - Phase 1: Publish Pending
    - Phase 2: Edit Requested
    - Phase 3: Material Done
    - Phase 4: Started
    - Phase 5: Delayed
    - Phase 6: Sponsored Blocked
    - Phase 7: Ideas
    
    Each video progresses through phases with specific tasks and completion tracking.
  version: 1.0.0
  contact:
    name: Viktor Farcic
    url: https://github.com/vfarcic/youtube-automation
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: http://localhost:8080/api
    description: API base path

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the API server
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  time:
                    type: string
                    format: date-time
                    example: "2025-05-27T00:00:00Z"

  /api/videos:
    post:
      summary: Create a new video
      description: Creates a new video with the specified name and category
      operationId: createVideo
      tags:
        - Videos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVideoRequest'
      responses:
        '201':
          description: Video created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVideoResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Get videos by phase
      description: Retrieves videos in a specific phase, or all videos from all phases if no phase is specified
      operationId: getVideos
      tags:
        - Videos
      parameters:
        - name: phase
          in: query
          required: false
          description: The phase ID to filter videos by. If not provided, returns videos from all phases (0-7).
          schema:
            type: integer
            minimum: 0
            maximum: 7
            example: 7
      responses:
        '200':
          description: Videos retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVideosResponse'
        '400':
          description: Invalid phase parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/videos/phases:
    get:
      summary: Get video phase statistics
      description: Returns count of videos in each phase
      operationId: getVideoPhases
      tags:
        - Videos
      responses:
        '200':
          description: Phase statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoPhasesResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/videos/list:
    get:
      summary: Get lightweight video list by phase
      description: |
        Retrieves a lightweight list of videos in a specific phase, or all videos from all phases if no phase is specified.
        Optimized for list views, returning only essential fields needed for video cards.
        
        Performance: ~200 bytes per video vs ~8.8KB for full video objects (97.5% reduction).
      operationId: getVideosList
      tags:
        - Videos
      parameters:
        - name: phase
          in: query
          required: false
          description: The phase ID to filter videos by. If not provided, returns videos from all phases (0-7).
          schema:
            type: integer
            minimum: 0
            maximum: 7
            example: 0
      responses:
        '200':
          description: Lightweight video list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVideosListResponse'
              example:
                videos:
                  - id: "tutorials/awesome-kubernetes-tutorial"
                    name: "awesome-kubernetes-tutorial"
                    category: "tutorials"
                    date: "2025-05-27T10:00"
                    title: "Kubernetes Tutorial: From Zero to Hero"
                    thumbnail: "material/k8s-tutorial/thumbnail.jpg"
                    status: "draft"
                    phase: 4
                    progress:
                      completed: 3
                      total: 9
                  - id: "devops/docker-best-practices"
                    name: "docker-best-practices"
                    category: "devops"
                    date: "2025-05-30T14:00"
                    title: "Docker Best Practices for Production"
                    thumbnail: "material/docker-bp/thumbnail.jpg"
                    status: "published"
                    phase: 0
                    progress:
                      completed: 11
                      total: 11
        '400':
          description: Invalid phase parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/videos/{videoName}:
    get:
      summary: Get a specific video
      description: Retrieves detailed information about a specific video
      operationId: getVideo
      tags:
        - Videos
      parameters:
        - name: videoName
          in: path
          required: true
          description: The file-based ID of the video (e.g., 'my-video-file-name')
          schema:
            type: string
            example: "my-video"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "category-01"
      responses:
        '200':
          description: Video retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVideoResponse'
        '400':
          description: Missing required parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update a video
      description: Updates an existing video with new data
      operationId: updateVideo
      tags:
        - Videos
      parameters:
        - name: videoName
          in: path
          required: true
          description: The file-based ID of the video (e.g., 'my-video-file-name')
          schema:
            type: string
            example: "my-video"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVideoRequest'
      responses:
        '200':
          description: Video updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVideoResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a video
      description: Deletes a video and all associated files
      operationId: deleteVideo
      tags:
        - Videos
      parameters:
        - name: videoName
          in: path
          required: true
          description: The file-based ID of the video (e.g., 'my-video-file-name')
          schema:
            type: string
            example: "my-video"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "category-01"
      responses:
        '204':
          description: Video deleted successfully
        '400':
          description: Missing required parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/videos/{videoName}/move:
    post:
      summary: Move a video to a different category
      description: Moves a video and its files to a different directory/category
      operationId: moveVideo
      tags:
        - Videos
      parameters:
        - name: videoName
          in: path
          required: true
          description: The file-based ID of the video (e.g., 'my-video-file-name')
          schema:
            type: string
            example: "my-video"
        - name: category
          in: query
          required: true
          description: The current category of the video
          schema:
            type: string
            example: "category-01"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveVideoRequest'
      responses:
        '200':
          description: Video moved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Video moved successfully"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/videos/{videoName}/initial-details:
    put:
      summary: Update video initial details phase
      description: Updates video fields specific to the initial details phase
      operationId: updateVideoInitialDetails
      tags:
        - Video Phases
      parameters:
        - name: videoName
          in: path
          required: true
          description: The file-based ID of the video (e.g., 'my-video-file-name')
          schema:
            type: string
            example: "my-video"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "category-01"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhaseUpdateRequest'
      responses:
        '200':
          description: Video initial details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVideoResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/videos/{videoName}/work-progress:
    put:
      summary: Update video work progress phase
      description: Updates video fields specific to the work progress phase
      operationId: updateVideoWorkProgress
      tags:
        - Video Phases
      parameters:
        - name: videoName
          in: path
          required: true
          description: The file-based ID of the video (e.g., 'my-video-file-name')
          schema:
            type: string
            example: "my-video"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "category-01"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhaseUpdateRequest'
      responses:
        '200':
          description: Video work progress updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVideoResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/videos/{videoName}/definition:
    put:
      summary: Update video definition phase
      description: Updates video fields specific to the definition phase
      operationId: updateVideoDefinition
      tags:
        - Video Phases
      parameters:
        - name: videoName
          in: path
          required: true
          description: The file-based ID of the video (e.g., 'my-video-file-name')
          schema:
            type: string
            example: "my-video"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "category-01"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhaseUpdateRequest'
      responses:
        '200':
          description: Video definition updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVideoResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/videos/{videoName}/post-production:
    put:
      summary: Update video post-production phase
      description: Updates video fields specific to the post-production phase
      operationId: updateVideoPostProduction
      tags:
        - Video Phases
      parameters:
        - name: videoName
          in: path
          required: true
          description: The file-based ID of the video (e.g., 'my-video-file-name')
          schema:
            type: string
            example: "my-video"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "category-01"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhaseUpdateRequest'
      responses:
        '200':
          description: Video post-production updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVideoResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/videos/{videoName}/publishing:
    put:
      summary: Update video publishing phase
      description: Updates video fields specific to the publishing phase
      operationId: updateVideoPublishing
      tags:
        - Video Phases
      parameters:
        - name: videoName
          in: path
          required: true
          description: The file-based ID of the video (e.g., 'my-video-file-name')
          schema:
            type: string
            example: "my-video"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "category-01"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhaseUpdateRequest'
      responses:
        '200':
          description: Video publishing updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVideoResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/videos/{videoName}/post-publish:
    put:
      summary: Update video post-publish phase
      description: Updates video fields specific to the post-publish phase
      operationId: updateVideoPostPublish
      tags:
        - Video Phases
      parameters:
        - name: videoName
          in: path
          required: true
          description: The file-based ID of the video (e.g., 'my-video-file-name')
          schema:
            type: string
            example: "my-video"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "category-01"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PhaseUpdateRequest'
      responses:
        '200':
          description: Video post-publish updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVideoResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/categories:
    get:
      summary: Get all categories
      description: Retrieves list of all available video categories
      operationId: getCategories
      tags:
        - Categories
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/animations/{videoName}:
    get:
      summary: Get animations from video manuscript
      description: |
        Extracts animation cues and instructions from a video's manuscript file.
        This endpoint parses the manuscript content to identify animation requirements,
        sections, and visual cues for video production.
        
        **Features:**
        - Manuscript parsing using existing filesystem operations (same as CLI)
        - No AI processing - direct file parsing for fast response
        - Section detection and animation extraction
        - Comprehensive error handling for all failure scenarios
        
        **Performance:** Fast response times using direct file parsing without AI overhead.
      operationId: getAnimations
      tags:
        - Animations
      parameters:
        - name: videoName
          in: path
          required: true
          description: The name of the video file (without extension)
          schema:
            type: string
            example: "kubernetes-tutorial"
        - name: category
          in: query
          required: true
          description: The category/directory containing the video
          schema:
            type: string
            example: "tutorials"
      responses:
        '200':
          description: Animations extracted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimationsResponse'
              examples:
                with_animations:
                  summary: Video with animation cues
                  description: Successful response when manuscript contains animation instructions
                  value:
                    animations:
                      - "Add animation for concept explanation"
                      - "Show diagram of system architecture"
                      - "Highlight code changes in the editor"
                      - "Zoom into terminal commands"
                empty_animations:
                  summary: Video without animations
                  description: Successful response when no animations are found in manuscript
                  value:
                    animations: []
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_video_name:
                  summary: Missing video name
                  value:
                    error: "videoName is required"
                missing_category:
                  summary: Missing category parameter
                  value:
                    error: "category query parameter is required"
                manuscript_not_configured:
                  summary: Video manuscript not configured
                  value:
                    error: "Video manuscript not configured"
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                video_not_found:
                  summary: Video does not exist
                  value:
                    error: "Video not found"
        '500':
          description: Internal server error - processing failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                processing_error:
                  summary: Failed to process animations
                  value:
                    error: "Failed to process animations"

  /api/editing/aspects:
    get:
      summary: Get editing aspects overview
      description: |
        Returns a lightweight overview of all available editing aspects without field details.
        This endpoint provides metadata about editing phases (initial-details, work-progress, 
        definition, post-production, publishing, post-publish) for UI navigation and overview.
        
        Each aspect includes:
        - Basic metadata (key, title, description)
        - UI configuration (icon, order, endpoint)
        - Field count for the aspect
        - Completion count (when video context is provided)
        
        **Progress Tracking**: When both `videoName` and `category` query parameters are provided,
        the response includes `completedFieldCount` showing how many fields have been filled
        for each aspect. This enables UI progress indicators like "6/8 fields completed".
        
        Performance: ~500 bytes response vs ~15KB for full field details (97% reduction).
      operationId: getEditingAspects
      tags:
        - Editing
      parameters:
        - name: videoName
          in: query
          required: false
          description: |
            Optional video name for progress tracking. When provided with category,
            enables completion count calculation for each aspect.
          schema:
            type: string
            example: "kubernetes-tutorial"
        - name: category
          in: query
          required: false
          description: |
            Optional video category for progress tracking. When provided with videoName,
            enables completion count calculation for each aspect.
          schema:
            type: string
            example: "tutorials"
      responses:
        '200':
          description: Editing aspects overview retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AspectOverviewResponse'
              examples:
                without_video_context:
                  summary: Basic overview without video context
                  description: Standard response when no video context is provided
                  value:
                    aspects:
                      - key: "initial-details"
                        title: "Initial Details"
                        description: "Basic video information and setup"
                        endpoint: "/api/videos/{videoName}/initial-details"
                        icon: "info"
                        order: 1
                        fieldCount: 8
                        completedFieldCount: 0
                      - key: "work-progress"
                        title: "Work Progress"
                        description: "Video creation and production tracking"
                        endpoint: "/api/videos/{videoName}/work-progress"
                        icon: "work"
                        order: 2
                        fieldCount: 11
                        completedFieldCount: 0
                with_video_context:
                  summary: Progress tracking with video context
                  description: Enhanced response showing actual completion counts when video context is provided
                  value:
                    aspects:
                      - key: "initial-details"
                        title: "Initial Details"
                        description: "Basic video information and setup"
                        endpoint: "/api/videos/{videoName}/initial-details"
                        icon: "info"
                        order: 1
                        fieldCount: 8
                        completedFieldCount: 6
                      - key: "work-progress"
                        title: "Work Progress"
                        description: "Video creation and production tracking"
                        endpoint: "/api/videos/{videoName}/work-progress"
                        icon: "work"
                        order: 2
                        fieldCount: 11
                        completedFieldCount: 8
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_category:
                  summary: Missing category when videoName provided
                  value:
                    error: "When videoName is provided, category is also required"
                video_not_found:
                  summary: Specified video not found
                  value:
                    error: "Video not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/editing/aspects/{aspectKey}/fields:
    get:
      summary: Get detailed field information for a specific aspect
      description: |
        Returns comprehensive field metadata for a specific editing aspect, including:
        
        - Field definitions with types and validation rules
        - UI rendering hints (input types, placeholders, help text)
        - Validation constraints (required, length limits, patterns)
        - Default values and options for select fields
        
        This endpoint is optimized for frontend forms and UI generation, providing
        all necessary metadata to render and validate editing interfaces.
      operationId: getAspectFields
      tags:
        - Editing
      parameters:
        - name: aspectKey
          in: path
          required: true
          description: |
            The unique key identifying the editing aspect. Must be one of:
            - initial-details
            - work-progress  
            - definition
            - post-production
            - publishing
            - post-publish
          schema:
            type: string
            enum: ["initial-details", "work-progress", "definition", "post-production", "publishing", "post-publish"]
            example: "work-progress"
      responses:
        '200':
          description: Aspect fields retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AspectFieldsResponse'
              example:
                aspectKey: "work-progress"
                aspectTitle: "Work Progress"
                fields:
                  - name: "Title"
                    type: "string"
                    required: true
                    order: 1
                    description: "The title of the video"
                    completionCriteria: "filled_only"
                    uiHints:
                      inputType: "text"
                      placeholder: "Enter video title"
                      helpText: "The main title that will appear on YouTube"
                      charLimit: 100
                      multiline: false
                    validationHints:
                      required: true
                      maxLength: 100
                    defaultValue: ""
                  - name: "Description"  
                    type: "text"
                    required: true
                    order: 2
                    description: "The description of the video"
                    completionCriteria: "filled_required"
                    uiHints:
                      inputType: "textarea"
                      placeholder: "Enter video description"
                      helpText: "Detailed description for YouTube"
                      rows: 5
                      charLimit: 5000
                      multiline: true
                    validationHints:
                      required: true
                      maxLength: 5000
                    defaultValue: ""
        '400':
          description: Invalid aspect key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "aspect key is required"
        '404':
          description: Aspect not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "aspect not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CreateVideoRequest:
      type: object
      required:
        - name
        - category
      properties:
        name:
          type: string
          description: The name of the video
          example: "my-awesome-video"
        category:
          type: string
          description: The category/directory for the video
          example: "category-01"

    CreateVideoResponse:
      type: object
      properties:
        video:
          $ref: '#/components/schemas/VideoIndex'

    VideoIndex:
      type: object
      properties:
        name:
          type: string
          description: The name of the video
          example: "my-awesome-video"
        category:
          type: string
          description: The category of the video
          example: "category-01"

    VideoPhasesResponse:
      type: object
      properties:
        phases:
          type: array
          items:
            $ref: '#/components/schemas/PhaseInfo'

    PhaseInfo:
      type: object
      properties:
        id:
          type: integer
          description: Phase ID (0-7)
          example: 7
        name:
          type: string
          description: Human-readable phase name
          example: "Ideas"
        count:
          type: integer
          description: Number of videos in this phase
          example: 5

    GetVideosResponse:
      type: object
      properties:
        videos:
          type: array
          items:
            $ref: '#/components/schemas/Video'

    GetVideoResponse:
      type: object
      properties:
        video:
          $ref: '#/components/schemas/Video'

    UpdateVideoRequest:
      type: object
      required:
        - video
      properties:
        video:
          $ref: '#/components/schemas/Video'

    MoveVideoRequest:
      type: object
      required:
        - target_directory_path
      properties:
        target_directory_path:
          type: string
          description: The target directory path to move the video to
          example: "manuscript/category-02"

    PhaseUpdateRequest:
      type: object
      description: Dynamic object containing phase-specific field updates
      additionalProperties: true
      example:
        title: "Updated Video Title"
        description: "Updated video description"
        date: "2025-05-27T10:00"

    CategoriesResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryInfo'

    CategoryInfo:
      type: object
      properties:
        name:
          type: string
          description: The name of the category
          example: "category-01"
        path:
          type: string
          description: The file system path of the category
          example: "manuscript/category-01"

    Video:
      type: object
      properties:
        id:
          type: string
          description: The unique string-based identifier for the video (category/name format)
          example: "category-01/my-awesome-video"
        name:
          type: string
          description: The canonical display name of the video, read from the file
          example: "My Awesome Video"
        index:
          type: integer
          description: The index number of the video
        path:
          type: string
          description: The file system path to the video
          example: "manuscript/category-01/my-awesome-video.yaml"
        category:
          type: string
          description: The category of the video
          example: "category-01"
        init:
          $ref: '#/components/schemas/Tasks'
        work:
          $ref: '#/components/schemas/Tasks'
        define:
          $ref: '#/components/schemas/Tasks'
        edit:
          $ref: '#/components/schemas/Tasks'
        publish:
          $ref: '#/components/schemas/Tasks'
        postPublish:
          $ref: '#/components/schemas/Tasks'
        projectName:
          type: string
          description: The name of the project
          example: "My Project"
        projectURL:
          type: string
          description: The URL of the project
          example: "https://github.com/user/project"
        sponsorship:
          $ref: '#/components/schemas/Sponsorship'
        date:
          type: string
          description: The scheduled date for the video
          example: "2025-05-27T10:00"
        delayed:
          type: boolean
          description: Whether the video is delayed
          example: false
        screen:
          type: boolean
          description: Whether screen recording is needed
          example: true
        head:
          type: boolean
          description: Whether head recording is needed
          example: false
        thumbnails:
          type: boolean
          description: Whether thumbnails are needed
          example: true
        diagrams:
          type: boolean
          description: Whether diagrams are needed
          example: false
        title:
          type: string
          description: The title of the video
          example: "How to Build Awesome Software"
        description:
          type: string
          description: The description of the video
          example: "In this video, we'll explore..."
        highlight:
          type: string
          description: The highlight text for the video
        tags:
          type: string
          description: Tags for the video
          example: "programming,tutorial,beginner"
        descriptionTags:
          type: string
          description: Tags used in the description
        location:
          type: string
          description: The recording location
        tagline:
          type: string
          description: The tagline for the video
        taglineIdeas:
          type: string
          description: Ideas for taglines
        otherLogos:
          type: string
          description: Other logos to include
        screenshots:
          type: boolean
          description: Whether screenshots are needed
          example: false
        requestThumbnail:
          type: boolean
          description: Whether a thumbnail is requested
          example: false
        thumbnail:
          type: string
          description: The thumbnail image
        language:
          type: string
          description: The language of the video
          example: "en"
        members:
          type: string
          description: Team members involved
        animations:
          type: string
          description: Animations needed
        requestEdit:
          type: boolean
          description: Whether editing is requested
          example: false
        movie:
          type: boolean
          description: Whether this is a movie format
          example: false
        timecodes:
          type: string
          description: Video timecodes
        hugoPath:
          type: string
          description: Hugo site path
        relatedVideos:
          type: string
          description: Related videos
        uploadVideo:
          type: string
          description: Upload video path
        videoId:
          type: string
          description: YouTube video ID
        tweet:
          type: string
          description: Tweet content
        linkedInPosted:
          type: boolean
          description: Whether posted to LinkedIn
          example: false
        slackPosted:
          type: boolean
          description: Whether posted to Slack
          example: false
        hnPosted:
          type: boolean
          description: Whether posted to Hacker News
          example: false
        dotPosted:
          type: boolean
          description: Whether posted to DevOpsToolkit
          example: false
        blueSkyPosted:
          type: boolean
          description: Whether posted to BlueSky
          example: false
        youTubeHighlight:
          type: boolean
          description: Whether highlighted on YouTube
          example: false
        youTubeComment:
          type: boolean
          description: Whether commented on YouTube
          example: false
        youTubeCommentReply:
          type: boolean
          description: Whether replied to YouTube comments
          example: false
        slides:
          type: boolean
          description: Whether slides are needed
          example: false
        gde:
          type: boolean
          description: Whether this is a GDE video
          example: false
        repo:
          type: string
          description: Repository URL
        notifiedSponsors:
          type: boolean
          description: Whether sponsors have been notified
          example: false
        appliedLanguage:
          type: string
          description: Applied language setting
        appliedAudioLanguage:
          type: string
          description: Applied audio language setting
        audioLanguage:
          type: string
          description: Audio language
        gist:
          type: string
          description: Gist URL or content
        code:
          type: boolean
          description: Whether code is included
          example: false

    Tasks:
      type: object
      description: Task completion tracking for a video phase
      properties:
        completed:
          type: integer
          description: Number of completed tasks
          example: 3
        total:
          type: integer
          description: Total number of tasks
          example: 5

    Sponsorship:
      type: object
      description: Sponsorship information for the video
      properties:
        amount:
          type: string
          description: Sponsorship amount
          example: "$1000"
        emails:
          type: string
          description: Sponsor contact emails
          example: "sponsor@company.com"
        blocked:
          type: string
          description: Blocked sponsors
          example: "competitor-company"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid request"
        message:
          type: string
          description: Detailed error message
          example: "The name parameter is required but was not provided"

    GetVideosListResponse:
      type: object
      properties:
        videos:
          type: array
          items:
            $ref: '#/components/schemas/VideoListItem'

    VideoListItem:
      type: object
      properties:
        id:
          type: string
          description: The unique string-based identifier for the video (category/name format)
          example: "tutorials/my-awesome-video"
        name:
          type: string
          description: The name of the video
          example: "my-awesome-video"
        category:
          type: string
          description: The category of the video
          example: "category-01"
        date:
          type: string
          description: The scheduled date for the video
          example: "2025-05-27T10:00"
        title:
          type: string
          description: The title of the video
          example: "Top 10 DevOps Tools You MUST Use in 2025!"
        thumbnail:
          type: string
          description: The thumbnail image path
          example: "material/top-2025/thumbnail-01.jpg"
        status:
          type: string
          description: The current status of the video
          enum: ["published", "draft"]
          example: "published"
        phase:
          type: integer
          description: The workflow phase of the video (0-7)
          minimum: 0
          maximum: 7
          example: 0
        progress:
          type: object
          description: Video completion progress
          properties:
            completed:
              type: integer
              description: Number of completed publish tasks
              example: 10
            total:
              type: integer
              description: Total number of publish tasks
              example: 11
      required:
        - id
        - name
        - category
        - title
        - status
        - phase
        - progress
      description: |
        Lightweight video object optimized for list views. Contains only essential fields
        needed for video cards, resulting in ~200 bytes per video compared to ~8.8KB
        for full video objects (97.5% size reduction).
        
        The phase field indicates the current workflow stage:
        - Phase 0: Published
        - Phase 1: Publish Pending  
        - Phase 2: Edit Requested
        - Phase 3: Material Done
        - Phase 4: Started
        - Phase 5: Delayed
        - Phase 6: Sponsored Blocked
        - Phase 7: Ideas

    AspectOverviewResponse:
      type: object
      properties:
        aspects:
          type: array
          items:
            $ref: '#/components/schemas/AspectSummary'
      description: |
        Response containing a lightweight overview of all editing aspects.
        Optimized for navigation and overview purposes.

    AspectFieldsResponse:
      type: object
      properties:
        aspectKey:
          type: string
          description: The unique key of the aspect
          example: "work-progress"
        aspectTitle:
          type: string
          description: The human-readable title of the aspect
          example: "Work Progress"
        fields:
          type: array
          items:
            $ref: '#/components/schemas/AspectField'
      required:
        - aspectKey
        - aspectTitle
        - fields
      description: |
        Response containing detailed field information for a specific editing aspect.
        Includes all metadata needed for frontend form generation and validation.

    AspectSummary:
      type: object
      properties:
        key:
          type: string
          description: Unique identifier for the aspect
          example: "work-progress"
        title:
          type: string
          description: Human-readable title
          example: "Work Progress"
        description:
          type: string
          description: Brief description of the aspect's purpose
          example: "Video creation and production tracking"
        endpoint:
          type: string
          description: API endpoint for updating this aspect
          example: "/api/videos/{videoName}/work-progress"
        icon:
          type: string
          description: Icon identifier for UI display
          example: "work"
        order:
          type: integer
          description: Sort order for UI display
          example: 2
        fieldCount:
          type: integer
          description: Number of fields in this aspect
          example: 11
        completedFieldCount:
          type: integer
          description: |
            Number of completed fields in this aspect. When video context is not provided,
            this will be 0. When video context is provided via query parameters, this
            shows the actual count of completed fields based on the video's current state.
          example: 8
      required:
        - key
        - title
        - description
        - endpoint
        - icon
        - order
        - fieldCount
        - completedFieldCount

    # AI Content Generation Schemas
    AIRequest:
      type: object
      required:
        - manuscript
      properties:
        manuscript:
          type: string
          description: |
            The video manuscript content to analyze for AI content generation.
            Can be any length from a few sentences to full video scripts.
          example: "In this tutorial, we'll explore advanced Kubernetes deployment strategies including blue-green deployments, canary releases, and rolling updates. We'll cover best practices for production environments and demonstrate how to implement these patterns using kubectl and Helm."
          minLength: 1
          maxLength: 500000
      description: Request payload for all AI content generation endpoints

    AITitlesResponse:
      type: object
      properties:
        titles:
          type: array
          items:
            type: string
          description: Array of 5 AI-generated video titles optimized for YouTube
          example:
            - "Advanced Kubernetes Deployment Strategies: Blue-Green, Canary & Rolling Updates"
            - "Master Production Kubernetes: Deployment Patterns That Actually Work"
            - "Kubernetes Deployment Strategies Explained: From Zero to Production Hero"
            - "The Complete Guide to Kubernetes Deployment Patterns in 2024"
            - "Production-Ready Kubernetes: Advanced Deployment Techniques"
          minItems: 5
          maxItems: 5
      required:
        - titles
      description: Response containing AI-generated video titles

    AIDescriptionResponse:
      type: object
      properties:
        description:
          type: string
          description: AI-generated comprehensive video description optimized for YouTube SEO
          example: "🚀 Ready to master advanced Kubernetes deployment strategies? In this comprehensive tutorial, we dive deep into production-ready deployment patterns that every DevOps engineer should know.\n\n📋 What You'll Learn:\n• Blue-green deployment implementation\n• Canary release strategies\n• Rolling update best practices\n• Production environment considerations\n• kubectl and Helm integration\n\n⚡ Perfect for intermediate to advanced Kubernetes users looking to level up their deployment game!\n\n🔗 Resources mentioned in this video:\n• Kubernetes documentation\n• Helm charts examples\n• Production deployment checklist\n\n👍 If this helped you, please like and subscribe for more DevOps content!"
          minLength: 50
          maxLength: 5000
      required:
        - description
      description: Response containing AI-generated video description

    AITagsResponse:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
          description: Array of relevant SEO-optimized tags for YouTube discoverability
          example:
            - "kubernetes"
            - "devops"
            - "deployment"
            - "blue-green deployment"
            - "canary release"
            - "rolling updates"
            - "kubectl"
            - "helm"
            - "production"
            - "container orchestration"
          minItems: 5
          maxItems: 15
      required:
        - tags
      description: Response containing AI-generated video tags

    AITweetsResponse:
      type: object
      properties:
        tweets:
          type: array
          items:
            type: string
          description: Array of engaging promotional tweets for social media marketing
          example:
            - "🚀 New video is live! Master advanced Kubernetes deployment strategies with blue-green, canary, and rolling updates. Perfect for production environments! #Kubernetes #DevOps #CloudNative"
            - "⚡ Struggling with Kubernetes deployments in production? This tutorial covers the deployment patterns that actually work in real-world scenarios. Check it out! #K8s #DevOps"
            - "📚 Deep dive into Kubernetes deployment strategies! Learn blue-green deployments, canary releases, and rolling updates with practical examples. Link in bio! #Kubernetes #Tutorial"
          minItems: 3
          maxItems: 5
      required:
        - tweets
      description: Response containing AI-generated promotional tweets

    AIHighlightsResponse:
      type: object
      properties:
        highlights:
          type: array
          items:
            type: string
          description: Array of key content highlights extracted from the manuscript
          example:
            - "Blue-green deployment eliminates downtime by maintaining two identical production environments"
            - "Canary releases allow testing new versions with a small subset of users before full rollout"
            - "Rolling updates provide gradual deployment with automatic rollback capabilities"
            - "kubectl and Helm integration streamlines deployment automation and management"
            - "Production considerations include monitoring, logging, and disaster recovery planning"
          minItems: 3
          maxItems: 10
      required:
        - highlights
      description: Response containing AI-generated content highlights

    AIDescriptionTagsResponse:
      type: object
      properties:
        description_tags:
          type: array
          items:
            type: string
          description: Array of description segments with embedded hashtags for social media optimization
          example:
            - "🚀 Master advanced #Kubernetes deployment strategies in this comprehensive tutorial! Learn #BlueGreenDeployment, #CanaryRelease, and #RollingUpdates for production environments."
            - "Perfect for #DevOps engineers looking to level up their #ContainerOrchestration skills with #kubectl and #Helm integration."
            - "📋 Topics covered: #ProductionDeployment best practices, monitoring strategies, and automated rollback procedures."
          minItems: 2
          maxItems: 5
      required:
        - description_tags
      description: Response containing AI-generated description with embedded tags

    AspectField:
      type: object
      properties:
        name:
          type: string
          description: The field display name for UI
          example: "Title"
        fieldName:
          type: string
          description: The actual camelCase property name used in video data API
          example: "title"
        type:
          type: string
          description: The field type for validation and UI rendering
          enum: ["string", "text", "boolean", "date", "select", "number"]
          example: "string"
        required:
          type: boolean
          description: Whether this field is required
          example: true
        order:
          type: integer
          description: Display order for the field
          example: 1
        description:
          type: string
          description: Human-readable description of the field
          example: "The title of the video"
        completionCriteria:
          type: string
          description: |
            Defines the completion criteria for this field, determining when it should be considered "complete" or "valid" for progress tracking and UI styling.
          enum: ["filled_only", "empty_or_filled", "conditional", "true_only", "false_only", "filled_required"]
          example: "filled_only"
        options:
          $ref: '#/components/schemas/FieldOptions'
        uiHints:
          $ref: '#/components/schemas/UIHints'
        validationHints:
          $ref: '#/components/schemas/ValidationHints'
        defaultValue:
          description: Default value for the field (type varies by field type)
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: "null"
          example: ""
      required:
        - name
        - fieldName
        - type
        - required
        - order
        - description
        - completionCriteria
      examples:
        stringField:
          summary: String field example
          value:
            name: "Title"
            fieldName: "title"
            type: "string"
            required: true
            order: 1
            description: "The title of the video"
            completionCriteria: "filled_only"
            uiHints:
              inputType: "text"
              placeholder: "Enter video title"
              helpText: "The main title that will appear on YouTube"
              multiline: false
        textField:
          summary: Multi-line text field example
          value:
            name: "Description"
            fieldName: "description"
            type: "text"
            required: false
            order: 2
            description: "Detailed description of the video content"
            completionCriteria: "empty_or_filled"
            uiHints:
              inputType: "textarea"
              placeholder: "Enter detailed description..."
              helpText: "Provide a comprehensive description"
              rows: 3
              multiline: true
        dateField:
          summary: Date field example with new format
          value:
            name: "Date"
            fieldName: "date"
            type: "date"
            required: false
            order: 3
            description: "Scheduled date and time for the video"
            completionCriteria: "empty_or_filled"
            uiHints:
              inputType: "datetime"
              placeholder: "YYYY-MM-DDTHH:MM"
              helpText: "Enter date and time in UTC format"
              multiline: false
        booleanField:
          summary: Boolean field example
          value:
            name: "Code"
            fieldName: "code"
            type: "boolean"
            required: false
            order: 4
            description: "Mark when code examples are ready"
            completionCriteria: "true_only"
            uiHints:
              inputType: "checkbox"
              helpText: "Check when all code examples are complete"
              multiline: false

    FieldOptions:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
          description: Available options for select-type fields
          example: ["draft", "review", "final"]
      description: Additional configuration for select-type fields

    UIHints:
      type: object
      properties:
        inputType:
          type: string
          description: |
            HTML input type for rendering. For date fields, uses 'datetime' input type 
            with YYYY-MM-DDTHH:MM format for UTC compatibility.
          enum: ["text", "textarea", "checkbox", "select", "datetime", "number"]
          example: "text"
        placeholder:
          type: string
          description: |
            Placeholder text for input fields. For datetime fields, typically shows 
            'YYYY-MM-DDTHH:MM' format.
          example: "Enter video title"
        helpText:
          type: string
          description: Help text displayed near the field
          example: "The main title that will appear on YouTube"
        rows:
          type: integer
          description: Number of rows for textarea fields
          example: 3
        charLimit:
          type: integer
          description: Character limit for text fields
          example: 100
        multiline:
          type: boolean
          description: Whether the field supports multiple lines
          example: false
        options:
          type: array
          items:
            $ref: '#/components/schemas/SelectOption'
          description: Options for select fields
        attributes:
          type: object
          additionalProperties: true
          description: Additional HTML attributes for the input
      description: UI rendering hints for frontend applications

    ValidationHints:
      type: object
      properties:
        required:
          type: boolean
          description: Whether the field is required
          example: true
        minLength:
          type: integer
          description: Minimum length for text fields
          example: 1
        maxLength:
          type: integer
          description: Maximum length for text fields
          example: 100
        pattern:
          type: string
          description: Regular expression pattern for validation
          example: "^[a-zA-Z0-9\\s]+$"
        patternDesc:
          type: string
          description: Human-readable description of the pattern
          example: "Only letters, numbers, and spaces allowed"
        min:
          type: integer
          description: Minimum value for numeric fields
          example: 0
        max:
          type: integer
          description: Maximum value for numeric fields
          example: 100
      description: Validation rules for frontend form validation

    SelectOption:
      type: object
      properties:
        label:
          type: string
          description: Display label for the option
          example: "Draft"
        value:
          description: The actual value (type varies)
          oneOf:
            - type: string
            - type: number
            - type: boolean
          example: "draft"
      required:
        - label
        - value
      description: An option for select-type fields

    AnimationsResponse:
      type: object
      properties:
        animations:
          type: array
          items:
            type: string
          description: Array of animation cues and instructions extracted from the video manuscript
          example:
            - "Add animation for concept explanation"
            - "Show diagram of system architecture"
            - "Highlight code changes in the editor"
            - "Zoom into terminal commands"
          minItems: 0
          maxItems: 50
      required:
        - animations
      description: |
        Response containing animations extracted from video manuscript.
        The animations array may be empty if no animation cues are found in the manuscript.

  /api/ai/titles:
    post:
      summary: Generate AI-powered video titles
      description: |
        Generates multiple creative and engaging video titles based on the provided manuscript content.
        Uses Azure OpenAI to analyze the content and suggest 5 optimized titles for YouTube.
      operationId: generateTitles
      tags:
        - AI Content Generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIRequest'
            example:
              manuscript: "In this tutorial, we'll explore advanced Kubernetes deployment strategies including blue-green deployments, canary releases, and rolling updates. We'll cover best practices for production environments and demonstrate how to implement these patterns using kubectl and Helm."
      responses:
        '200':
          description: Titles generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AITitlesResponse'
              example:
                titles:
                  - "Advanced Kubernetes Deployment Strategies: Blue-Green, Canary & Rolling Updates"
                  - "Master Production Kubernetes: Deployment Patterns That Actually Work"
                  - "Kubernetes Deployment Strategies Explained: From Zero to Production Hero"
                  - "The Complete Guide to Kubernetes Deployment Patterns in 2024"
                  - "Production-Ready Kubernetes: Advanced Deployment Techniques"
        '400':
          description: Invalid request - manuscript is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed - only POST is supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: AI service error or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/titles/{videoName}:
    post:
      summary: Generate AI-powered video titles (optimized)
      description: |
        Generates multiple creative and engaging video titles for a specific video by name and category.
        This optimized endpoint uses URL parameters instead of JSON payload, reducing request size and 
        centralizing manuscript file management on the server side.
      operationId: generateTitlesOptimized
      tags:
        - AI Content Generation
      parameters:
        - name: videoName
          in: path
          required: true
          description: The name of the video to generate titles for
          schema:
            type: string
            example: "ai-kills-iac"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "ai"
      responses:
        '200':
          description: Titles generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AITitlesResponse'
              example:
                titles:
                  - "AI Kills Infrastructure as Code: The Future of DevOps Automation"
                  - "How AI is Revolutionizing Infrastructure Management: Beyond IaC"
                  - "The End of Traditional IaC? AI-Powered Infrastructure Revolution"
                  - "AI vs Infrastructure as Code: Which Will Dominate DevOps?"
                  - "Breaking: AI Makes Infrastructure as Code Obsolete"
        '400':
          description: Invalid request - videoName and category are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed - only POST is supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: AI service error or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/description:
    post:
      summary: Generate AI-powered video description
      description: |
        Generates a comprehensive and engaging video description based on the provided manuscript content.
        The description is optimized for YouTube SEO and viewer engagement.
      operationId: generateDescription
      tags:
        - AI Content Generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIRequest'
      responses:
        '200':
          description: Description generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIDescriptionResponse'
              example:
                description: "🚀 Ready to master advanced Kubernetes deployment strategies? In this comprehensive tutorial, we dive deep into production-ready deployment patterns that every DevOps engineer should know.\n\n📋 What You'll Learn:\n• Blue-green deployment implementation\n• Canary release strategies\n• Rolling update best practices\n• Production environment considerations\n• kubectl and Helm integration\n\n⚡ Perfect for intermediate to advanced Kubernetes users looking to level up their deployment game!\n\n🔗 Resources mentioned in this video:\n• Kubernetes documentation\n• Helm charts examples\n• Production deployment checklist\n\n👍 If this helped you, please like and subscribe for more DevOps content!"
        '400':
          description: Invalid request - manuscript is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed - only POST is supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: AI service error or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/description/{videoName}:
    post:
      summary: Generate AI-powered video description (optimized)
      description: |
        Generates a comprehensive and engaging video description for a specific video by name and category.
        This optimized endpoint uses URL parameters instead of JSON payload, reducing request size and 
        centralizing manuscript file management on the server side.
      operationId: generateDescriptionOptimized
      tags:
        - AI Content Generation
      parameters:
        - name: videoName
          in: path
          required: true
          description: The name of the video to generate description for
          schema:
            type: string
            example: "ai-kills-iac"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "ai"
      responses:
        '200':
          description: Description generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIDescriptionResponse'
              example:
                description: "🤖 Is AI really killing Infrastructure as Code? In this deep-dive analysis, we explore how artificial intelligence is transforming DevOps practices and what it means for the future of infrastructure management.\n\n📋 What You'll Discover:\n• How AI is changing infrastructure automation\n• The evolution beyond traditional IaC tools\n• Real-world examples of AI-driven infrastructure\n• What this means for DevOps engineers\n• Future predictions and career implications\n\n⚡ Perfect for DevOps professionals, infrastructure engineers, and anyone interested in the intersection of AI and infrastructure!\n\n🔗 Resources mentioned:\n• AI infrastructure tools comparison\n• Traditional vs AI-driven approaches\n• Career transition strategies\n\n👍 If this analysis helped clarify the AI vs IaC debate, please like and subscribe for more tech insights!"
        '400':
          description: Invalid request - videoName and category are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed - only POST is supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: AI service error or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/tags:
    post:
      summary: Generate AI-powered video tags
      description: |
        Generates relevant and SEO-optimized tags based on the provided manuscript content.
        Returns an array of tags that help with YouTube discoverability.
      operationId: generateTags
      tags:
        - AI Content Generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIRequest'
      responses:
        '200':
          description: Tags generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AITagsResponse'
              example:
                tags:
                  - "kubernetes"
                  - "devops"
                  - "deployment"
                  - "blue-green deployment"
                  - "canary release"
                  - "rolling updates"
                  - "kubectl"
                  - "helm"
                  - "production"
                  - "container orchestration"
        '400':
          description: Invalid request - manuscript is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed - only POST is supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: AI service error or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/tags/{videoName}:
    post:
      summary: Generate AI-powered video tags (optimized)
      description: |
        Generates relevant and SEO-optimized tags for a specific video by name and category.
        This optimized endpoint uses URL parameters instead of JSON payload, reducing request size and 
        centralizing manuscript file management on the server side.
      operationId: generateTagsOptimized
      tags:
        - AI Content Generation
      parameters:
        - name: videoName
          in: path
          required: true
          description: The name of the video to generate tags for
          schema:
            type: string
            example: "ai-kills-iac"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "ai"
      responses:
        '200':
          description: Tags generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AITagsResponse'
              example:
                tags:
                  - "artificial intelligence"
                  - "infrastructure as code"
                  - "devops"
                  - "automation"
                  - "cloud computing"
                  - "terraform"
                  - "ansible"
                  - "kubernetes"
                  - "ai revolution"
                  - "future of devops"
        '400':
          description: Invalid request - videoName and category are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed - only POST is supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: AI service error or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/tweets:
    post:
      summary: Generate AI-powered promotional tweets
      description: |
        Generates engaging promotional tweets based on the provided manuscript content.
        Perfect for social media marketing of your video content.
      operationId: generateTweets
      tags:
        - AI Content Generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIRequest'
      responses:
        '200':
          description: Tweets generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AITweetsResponse'
              example:
                tweets:
                  - "🚀 New video is live! Master advanced Kubernetes deployment strategies with blue-green, canary, and rolling updates. Perfect for production environments! #Kubernetes #DevOps #CloudNative"
                  - "⚡ Struggling with Kubernetes deployments in production? This tutorial covers the deployment patterns that actually work in real-world scenarios. Check it out! #K8s #DevOps"
                  - "📚 Deep dive into Kubernetes deployment strategies! Learn blue-green deployments, canary releases, and rolling updates with practical examples. Link in bio! #Kubernetes #Tutorial"
        '400':
          description: Invalid request - manuscript is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed - only POST is supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: AI service error or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/tweets/{videoName}:
    post:
      summary: Generate AI-powered promotional tweets (optimized)
      description: |
        Generates engaging promotional tweets for a specific video by name and category.
        This optimized endpoint uses URL parameters instead of JSON payload, reducing request size and 
        centralizing manuscript file management on the server side.
      operationId: generateTweetsOptimized
      tags:
        - AI Content Generation
      parameters:
        - name: videoName
          in: path
          required: true
          description: The name of the video to generate tweets for
          schema:
            type: string
            example: "ai-kills-iac"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "ai"
      responses:
        '200':
          description: Tweets generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AITweetsResponse'
              example:
                tweets:
                  - "🤖 New video: Is AI really killing Infrastructure as Code? Deep dive into how AI is transforming DevOps and what it means for the future! #AI #DevOps #InfrastructureAsCode #TechTrends"
                  - "⚡ The great debate: AI vs Infrastructure as Code! Watch my latest analysis on how artificial intelligence is reshaping infrastructure management. Link in bio! #AIRevolution #DevOps"
                  - "🚀 Breaking down the AI vs IaC debate in my newest video! Essential viewing for DevOps engineers navigating the future of infrastructure automation. #AI #DevOps #CloudComputing"
        '400':
          description: Invalid request - videoName and category are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed - only POST is supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: AI service error or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/highlights:
    post:
      summary: Generate AI-powered content highlights
      description: |
        Extracts and generates key highlights from the provided manuscript content.
        Useful for creating video chapters, key takeaways, or summary points.
      operationId: generateHighlights
      tags:
        - AI Content Generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIRequest'
      responses:
        '200':
          description: Highlights generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIHighlightsResponse'
              example:
                highlights:
                  - "Blue-green deployment eliminates downtime by maintaining two identical production environments"
                  - "Canary releases allow testing new versions with a small subset of users before full rollout"
                  - "Rolling updates provide gradual deployment with automatic rollback capabilities"
                  - "kubectl and Helm integration streamlines deployment automation and management"
                  - "Production considerations include monitoring, logging, and disaster recovery planning"
        '400':
          description: Invalid request - manuscript is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed - only POST is supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: AI service error or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/highlights/{videoName}:
    post:
      summary: Generate AI-powered content highlights (optimized)
      description: |
        Extracts and generates key highlights for a specific video by name and category.
        This optimized endpoint uses URL parameters instead of JSON payload, reducing request size and 
        centralizing manuscript file management on the server side.
      operationId: generateHighlightsOptimized
      tags:
        - AI Content Generation
      parameters:
        - name: videoName
          in: path
          required: true
          description: The name of the video to generate highlights for
          schema:
            type: string
            example: "ai-kills-iac"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "ai"
      responses:
        '200':
          description: Highlights generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIHighlightsResponse'
              example:
                highlights:
                  - "AI is fundamentally changing how we approach infrastructure automation"
                  - "Traditional IaC tools like Terraform may become obsolete as AI takes over"
                  - "Machine learning algorithms can now predict and prevent infrastructure failures"
                  - "The DevOps role is evolving from manual scripting to AI orchestration"
                  - "Organizations must adapt their infrastructure strategies to remain competitive"
        '400':
          description: Invalid request - videoName and category are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed - only POST is supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: AI service error or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/description-tags:
    post:
      summary: Generate AI-powered description with embedded tags
      description: |
        Generates a comprehensive video description that includes relevant tags embedded naturally within the content.
        Combines the benefits of both description and tags generation in a single optimized response.
      operationId: generateDescriptionTags
      tags:
        - AI Content Generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIRequest'
      responses:
        '200':
          description: Description with tags generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIDescriptionTagsResponse'
              example:
                description_tags:
                  - "🚀 Master advanced #Kubernetes deployment strategies in this comprehensive tutorial! Learn #BlueGreenDeployment, #CanaryRelease, and #RollingUpdates for production environments."
                  - "Perfect for #DevOps engineers looking to level up their #ContainerOrchestration skills with #kubectl and #Helm integration."
                  - "📋 Topics covered: #ProductionDeployment best practices, monitoring strategies, and automated rollback procedures."
        '400':
          description: Invalid request - manuscript is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed - only POST is supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: AI service error or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/ai/description-tags/{videoName}:
    post:
      summary: Generate AI-powered description with embedded tags (optimized)
      description: |
        Generates a comprehensive video description that includes relevant tags embedded naturally within the content
        for a specific video by name and category. This optimized endpoint uses URL parameters instead of JSON payload, 
        reducing request size and centralizing manuscript file management on the server side.
      operationId: generateDescriptionTagsOptimized
      tags:
        - AI Content Generation
      parameters:
        - name: videoName
          in: path
          required: true
          description: The name of the video to generate description with tags for
          schema:
            type: string
            example: "ai-kills-iac"
        - name: category
          in: query
          required: true
          description: The category of the video
          schema:
            type: string
            example: "ai"
      responses:
        '200':
          description: Description with tags generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIDescriptionTagsResponse'
              example:
                description_tags:
                  - "🤖 Is #AI really killing #InfrastructureAsCode? Explore how #ArtificialIntelligence is transforming #DevOps practices and reshaping the future of infrastructure management."
                  - "Perfect for #DevOpsEngineers, #CloudArchitects, and #TechProfessionals looking to understand the intersection of #AI and #InfrastructureAutomation."
                  - "📋 Topics: #MachineLearning in infrastructure, #AutomationEvolution, and career implications for #DevOps professionals in the #AIRevolution era."
        '400':
          description: Invalid request - videoName and category are required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Method not allowed - only POST is supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: AI service error or internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Health
    description: Health check operations
  - name: Videos
    description: Video CRUD operations
  - name: Video Phases
    description: Phase-specific video updates
  - name: Categories
    description: Category management operations
  - name: Animations
    description: Animation extraction from video manuscripts (non-AI parsing)
  - name: Editing
    description: Video editing aspects metadata and field definitions
  - name: AI Content Generation
    description: AI-powered content generation for video titles, descriptions, tags, tweets, and highlights